@page "/"
@inject IJSRuntime JsRuntime
@using System.Xml
@using Newtonsoft.Json
@using System.Xml.Serialization
@using System.Text

<PageTitle>D365 Converter</PageTitle>
<Div Class="container-fluid">
    @if (showTextEntry)
    {
        <Label>Select a File:</Label>
        <InputFile id="flpicker" OnChange="OnInputFileChange"></InputFile>
    }
    else
    {
        <Row>
            <Column ColumnSize="ColumnSize.Is11">
                <Column ColumnSize="ColumnSize.Is4">
                    <Button Color="Color.Success" Clicked="@(async()=> await treeViewRef.ExpandAll())">Expand All</Button>
                    <Button Color="Color.Danger" Clicked="@(async ()=> await treeViewRef.CollapseAll())">Collapse All</Button>
                </Column>
                <Column ColumnSize="ColumnSize.Is4">
                    <Label>@convertedTrace.TraceCriteria.DisplayText</Label>
                </Column>
                <Column ColumnSize="ColumnSize.Is12">
                    <TreeView Margin="Margin.Is1" @ref="@treeViewRef" Nodes="convertedTrace.TraceHierarchy.ItemNode"
                        GetChildNodes="@(item => item.ChildItemNode)"
                        HasChildNodes="@(item => item.HasChildren == true)">
                        <NodeContent>
                            <Badge TextColor="TextColor.Light" Color="Color.Info" Pill="true">
                                    <Label Margin="Margin.Is1" TextSize="TextSize.Medium">@context.DisplayLabel</Label>
                            </Badge>
                        </NodeContent>
                    </TreeView>
                </Column>
            </Column>
            <Column ColumnSize="ColumnSize.Is1">
                <Button Color="Color.Primary" Clicked="ResetAsync">Reset</Button>
            </Column>
        </Row>
    }
</Div>


@code {
    TreeView<ItemNode> treeViewRef;
    private bool showTextEntry { get; set; } = true;
    private string inputText { get; set; }
    private Trace convertedTrace { get; set; }

    private async void ResetAsync()
    {
        convertedTrace = null;
        showTextEntry = true;
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 60;

        foreach (var file in e.GetMultipleFiles(1))
        {
            if (file.ContentType != "text/xml")
            {
                var message = "Invalid File Type";
                await JsRuntime.InvokeVoidAsync("alert", message);

            } else
            {
                //load file
                XmlSerializer serializer = new XmlSerializer(typeof(Trace));

                var xmlFromFile = string.Empty;
                using(var fileContent = new StreamContent(file.OpenReadStream()))
                {
                    xmlFromFile = await fileContent.ReadAsStringAsync();
                }

                if (string.IsNullOrWhiteSpace(xmlFromFile))
                {
                    await JsRuntime.InvokeVoidAsync("alert", "File read error");
                    return;
                }

                using (var stream = new MemoryStream(Encoding.UTF8.GetBytes(xmlFromFile)))
                {
                    convertedTrace = (Trace)serializer.Deserialize(stream);
                }

                if (convertedTrace != null)
                {
                    showTextEntry = false;
                }
            }
        }

    }
}
